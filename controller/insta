
exports.instantPostOnSocialMedia = async function (req, res) {
    var requestData = req.body;
    console.log(typeof requestData.acc_type);
    var userdetails = await GlobalService.getUserDetails(req.headers['authorization']);

    await FUNCTIONS.DATA_WRITE(req);
    //console.log(requestData);
    const userSettingsObj = {}
    if (requestData == undefined) {
        res.status(400);
        res.json({ replyMsg: LANGTEXT.REQUIRED_DATA, replyCode: 'error'});
    } else {
        try{
            if (!userdetails || !userdetails.id) {
                res.status(400);
                res.json({
                  replyCode: "error",
                  replyMsg: LANGTEXT.USERNOTFOUND,
                })
              } else {
                if(requestData.acc_type === 1){
                    const appId = 'YOUR_APP_ID';
                    const appSecret = 'YOUR_APP_SECRET';
                    const redirectUri = 'YOUR_REDIRECT_URI';
                    const code = 'CODE_RECEIVED_FROM_FACEBOOK';
                    
                    await axios.get(`https://graph.facebook.com/v13.0/oauth/access_token?client_id=${appId}&redirect_uri=${redirectUri}&client_secret=${appSecret}&code=${code}`)
                    .then(async (userAccessTokenResponse) => {
                        const userAccessToken = userAccessTokenResponse.data.access_token;
                        console.log(userAccessToken);

                        const pageId = req.body.page_Id;

                        await axios.get(`https://graph.facebook.com/${pageId}?fields=access_token&access_token=${userAccessToken}`)
                        .then(async (pageAccessTokenResponse) => {
                            const pageAccessToken = pageAccessTokenResponse.data.access_token;
                            let fbSMOSettingObj = {
                                code : code,
                                userAccessToken : userAccessToken,
                                pageAccessToken : pageAccessToken
                            }
                            let fbSMOPostObj = {
                                caption : req.body.caption,
                                user_id: req.body.user_id,
                                page_id: req.body.page_id,
                                post_type : req.body.post_type,
                                status: 1,
                            }

                            let mediaObj = {
                                access_token: pageAccessToken
                            }

                            let mediaSource = ''
                            if(req.body.videoUrl){
                                mediaSource = 'videos'
                                
                                mediaObj.file_url = req.body.videoUrl
                                fbSMOPostObj.video = req.body.videoUrl
                                if(req.body.caption) {
                                    mediaObj.description = req.body.caption
                                }
                            } else if(req.body.image){
                                mediaSource = 'photos'
                                mediaObj.url = req.body.image;
                                fbSMOPostObj = req.body.image;
                                if(req.body.caption) {
                                    mediaObj.caption = req.body.caption
                                }
                            } else {
                                mediaObj.message = req.body.caption
                                mediaSource = 'feed'
                            }
                            fbSMOPostObj.mediaSource = mediaSource;
                            await axios.post(`https://graph.facebook.com/v19.0/246095668596270/${mediaSource}`, mediaObj)
                            .then(async function (postResponse) {
                                if (postResponse) {
                                    try {
                                        await UserSMOSettings.update({appId:appId},fbSMOSettingObj)
                                        if(SettingResult){
                                            try {
                                                await UserSMOPost.create(fbSMOPostObj)
                                                res.status(201);
                                                res.json({ replyMsg: 'Data successfully inserted!', replyCode: 'success', data: data });                                    
                                            } catch (error) {
                                                var errorMessage = error.errors;
                                                var errorITem = [];
                                                errorMessage.forEach((item) => {
                                                    console.log('ID: ' + item.message);
                                                    errorITem.push({ "field": item.path, "message": item.message });
                                                });
                                                res.status(400);
                                                res.json({ replyCode: 'error', replyMsg: errorITem });
                                            }
                                        }
                                    } catch (error) {
                                        var errorMessage = error.errors;
                                        var errorITem = [];
                                        errorMessage.forEach((item) => {
                                            console.log('ID: ' + item.message);
                                            errorITem.push({ "field": item.path, "message": item.message });
                                        });
                                        res.status(400);
                                        res.json({ replyCode: 'error', replyMsg: errorITem });
                                    }
                                } else {
                                    res.status(500);
                                    res.json({ replyCode: 'error', replyMsg: "something went wrong" });
                                }
                            })
                            .catch(function (error) {
                                var errorMessage = error.errors;
                                var errorITem = [];
                                errorMessage.forEach((item) => {
                                    console.log('ID: ' + item.message);
                                    errorITem.push({ "field": item.path, "message": item.message });
                                });
                                res.status(400);
                                res.json({ replyCode: 'error', replyMsg: errorITem });
                            });

                            // res.status(200).json({pageAccessToken: pageAccessToken});
                        })
                        .catch((error) => {
                            var errorMessage = error.errors;
                            var errorITem = [];
                            errorMessage.forEach((item) => {
                                console.log('ID: ' + item.message);
                                errorITem.push({ "field": item.path, "message": item.message });
                            });
                            res.status(400);
                            res.json({ replyCode: 'error', replyMsg: errorITem });
                        });
                    })
                    .catch((error) => {
                        var errorMessage = error.errors;
                        var errorITem = [];
                        errorMessage.forEach((item) => {
                            console.log('ID: ' + item.message);
                            errorITem.push({ "field": item.path, "message": item.message });
                        });
                        res.status(400);
                        res.json({ replyCode: 'error', replyMsg: errorITem });
                    });
                } else if (requestData.acc_type === '2') {
                    UserSMOSettings.findOne({where:{status:1,user_id:userdetails.id},
                        attributes: ['insta_username', 'insta_password']}).then(async data => {
                        try {
                            let instaSMOPostObj = {
                                caption : requestData.caption,
                                user_id: userdetails.id,
                                post_type : requestData.post_type
                            }
                            const ig = new IgApiClient();
                            ig.state.generateDevice(data.insta_username);
                            ig.account.login(data.insta_username, data.insta_password).then(async () => {
                                
                                let sourceObj; 
                                if(req.files.file != 'undefined' && req.files.file != "" && req.files.file != null && req.files.file.name != '') {
                                    const filePath = req.files.file.path;
                                    const mimeType = req.files.file.type
                                    const filetype = mimeType.split('/')
                                    console.log("mimeType===",filetype[0]);
                                    
                                    
                                    instaSMOPostObj.mediaSource = filetype[0];
                                    //Resize Image
                                    let width;
                                    let height;
                                    if(filetype[0] === 'image'){
                                        //Check Image size
                                        const dimensions = sizeOf(filePath)
                                        console.log(dimensions)
                                        const imageSize = `${dimensions.width}x${dimensions.height}`;
                                        const standardImageSize = ['1080x1080','1080x566', '566x1080']
                                        
                                        if(!standardImageSize.includes(imageSize)){
                                            if(dimensions.width > dimensions.height){
                                                width = 1080;
                                                height = 566;
                                            } else if (dimensions.width < dimensions.height){
                                                width = 1080;
                                                height = 566;
                                            }
                                        }
                                    }
                                    filenamesave = FUNCTIONS.uploadImageWithoutCallback(req.files.file, env.SOCIALIMAGEUPLAODPATH);
                                    if (filenamesave[1]) {
                                      userErrorMessage = filenamesave[1];
                                      userErrorStatus = true;
                                    } else {
                                        requestData.image = 
                                        instaSMOPostObj.media_file = 'resized-' + filenamesave[0];
                                        const file_Path = env.IMAGEBASEPATH + 'smo/' + filenamesave[0];
                                        const images = await Jimp.read(file_Path);                                    
                                        images.resize(width, height, Jimp.RESIZE_BEZIER, function (errs, resp) {
                                            if (errs) {
                                                res.status(400);    
                                                res.json({ replyCode: 'error', replyMsg: 'Image dimentions should be in 1080x1080,1080x566, 566x1080 ratio' });
                                            }
                                        }).write(env.IMAGEBASEPATH + 'smo/resized-'+ filenamesave[0]);
                                        fs.unlinkSync(env.IMAGEBASEPATH + 'smo/' + filenamesave[0]);
                                    }
                                    const imageBuffer = fs.readFileSync(env.IMAGEBASEPATH + 'smo/resized-'+ filenamesave[0]);
                                    const dimensions = sizeOf(env.IMAGEBASEPATH + 'smo/resized-'+ filenamesave[0])
                                    sourceObj = {
                                        uploadOptions: {
                                            width: dimensions.width,
                                            height: dimensions.height,
                                            isSidecar: false
                                        }
                                    }
                                }
                                

                                


                                let publishResult;
                                if(instaSMOPostObj.mediaSource){
                                    if(instaSMOPostObj.mediaSource === 'image') {
                                        sourceObj.file = imageBuffer;
                                        publishResult = await ig.publish.photo(sourceObj);
                                        console.log('Post published:', publishResult);
                                    } else if(instaSMOPostObj.mediaSource === 'video') {
                                        sourceObj.video = imageBuffer;
                                        publishResult = await ig.publish.video(sourceObj);
                                        console.log('Post published:', publishResult);
                                    } 
                                } else if(instaSMOPostObj.caption){
                                    publishResult = await ig.publish.caption(instaSMOPostObj.caption);
                                }
                                if(publishResult.media && publishResult.media.id){
                                    instaSMOPostObj.post_id = publishResult.media.id;
                                } else {
                                    res.status(400);
                                    res.json({ replyCode: 'error', replyMsg: "Cannot be post at the moment, please try after some time" });
                                }
                                try {
                                    await UserSMOPost.create(instaSMOPostObj)
                                    // console.log(newUserPost);
                                    res.status(201);
                                    res.json({ replyMsg: 'Data successfully inserted!', replyCode: 'success', data: data });
                                } catch (error) {
                                    res.status(500);
                                    res.json({ replyCode: 'error', replyMsg: error.message });
                                }
                            }).catch ((error) =>{
                                res.status(400);
                                res.json({ replyCode: 'error', replyMsg: error.message });
                            })
                        } catch (error) {
                            res.status(400);
                            res.json({ replyCode: 'error', replyMsg: error.message });
                        }
                    }).catch(err => {
                        res.status(400);
                        res.json({
                            replyCode: 'error',
                            replyMsg:LANGTEXT.DATABASECONNECTIONERROR
                        });  
                    });                    
                }
            }
        } catch(error) {
            SaveError.create({
                user_id: userdetails.id,
                file: 'controller/user_smo.js',
                api: '***instantPostOnSocialMedia***',
                source: 'admin',
                err: error.toString(),
                resolved: 0
            })
            res.status(500);
            res.json({
                replyCode: 'error',
                replyMsg: LANGTEXT.DATABASECONNECTIONERROR,
            });
        }
    }
}
exports.scheduledPostOnSocialMedia = async function (req, res) {
    var requestData = req.body;
    console.log(typeof requestData.acc_type);
    var userdetails = await GlobalService.getUserDetails(req.headers['authorization']);

    await FUNCTIONS.DATA_WRITE(req);
    const userSettingsObj = {}
    if (requestData == undefined) {
        res.status(400);
        res.json({ replyMsg: LANGTEXT.REQUIRED_DATA, replyCode: 'error'});
    } else {
        try{
            if (!userdetails || !userdetails.id) {
                res.status(400);
                res.json({
                  replyCode: "error",
                  replyMsg: LANGTEXT.USERNOTFOUND,
                })
              } else {
                if (requestData.acc_type === '2') {
                    UserSMOSettings.findOne({where:{status:1,user_id:userdetails.id},
                        attributes: ['insta_username', 'insta_password']}).then(async data => {
                        try {
                            let instaSMOPostObj = {
                                caption : requestData.caption,
                                user_id: userdetails.id,
                                post_type : requestData.post_type,
                                is_posted: 0,
                                schedle_date: requestData.schedule_date,
                                schedule_time: requestData.schedule_time
                            }
                            if(req.files.file != 'undefined' && req.files.file != "" && req.files.file != null && req.files.file.name != '') {
                                const filePath = req.files.file.path;
                                const mimeType = req.files.file.type
                                const filetype = mimeType.split('/')
                                console.log("mimeType===",filetype[0]);
                                
                                
                                instaSMOPostObj.mediaSource = filetype[0];
                                //Resize Image
                                let width;
                                let height;
                                if(filetype[0] === 'image'){
                                    //Check Image size
                                    const dimensions = sizeOf(filePath)
                                    console.log(dimensions)
                                    const imageSize = `${dimensions.width}x${dimensions.height}`;
                                    const standardImageSize = ['1080x1080','1080x566', '566x1080']
                                    
                                    if(!standardImageSize.includes(imageSize)){
                                        if(dimensions.width > dimensions.height){
                                            width = 1080;
                                            height = 566;
                                        } else if (dimensions.width < dimensions.height){
                                            width = 1080;
                                            height = 566;
                                        }
                                    }
                                }
                                const filenamesave = FUNCTIONS.uploadImageWithoutCallback(req.files.file, env.SOCIALIMAGEUPLAODPATH);
                                if (filenamesave[1]) {
                                  userErrorMessage = filenamesave[1];
                                  userErrorStatus = true;
                                } else {
                                    requestData.image = 
                                    instaSMOPostObj.media_file = 'resized-' + filenamesave[0];
                                    const file_Path = env.IMAGEBASEPATH + 'smo/' + filenamesave[0];
                                    const images = await Jimp.read(file_Path);                                    
                                    images.resize(width, height, Jimp.RESIZE_BEZIER, function (errs, resp) {
                                        if (errs) {
                                            res.status(400);    
                                            res.json({ replyCode: 'error', replyMsg: 'Image dimentions should be in 1080x1080,1080x566, 566x1080 ratio' });
                                        }
                                    }).write(env.IMAGEBASEPATH + 'smo/resized-'+ filenamesave[0]);
                                    fs.unlinkSync(env.IMAGEBASEPATH + 'smo/' + filenamesave[0]);
                                }
                            }
                            
                            // console.log('instaSMOPostObj*****', instaSMOPostObj)
                            try {
                                await UserSMOPost.create(instaSMOPostObj)
                                res.status(201);
                                res.json({ replyMsg: 'Data successfully inserted!', replyCode: 'success', data: data });
                            } catch (error) {
                                res.status(400);
                                res.json({ replyCode: 'error', replyMsg: error.message });
                            }                            
                        } catch (error) {
                            res.status(400);
                            res.json({ replyCode: 'error', replyMsg: error.message });
                        }
                    }).catch(err => {
                        res.status(400);
                        res.json({
                            replyCode: 'error',
                            replyMsg:LANGTEXT.DATABASECONNECTIONERROR
                        });  
                    });                    
                }
            }
        } catch(error) {
            SaveError.create({
                user_id: userdetails.id,
                file: 'controller/user_smo.js',
                api: '***scheduledPostOnSocialMedia***',
                source: 'admin',
                err: error.toString(),
                resolved: 0
            })
            res.status(500);
            res.json({
                replyCode: 'error',
                replyMsg: LANGTEXT.DATABASECONNECTIONERROR,
            });
        }
    }
}

exports.smoPostCron = async function (req, res) {
    try {
        const credentialsPost = await UserSMOSettings.findAll({
            where: { status: 1 },
            attributes: ['user_id','insta_password', 'insta_username']
        })
        async.eachSeries(credentialsPost, async function (val, cb) {
            const scheduledPost = await UserSMOPost.findAll({where: {is_posted: 0 }})
            async.eachSeries(scheduledPost, async function (postValue, cb2) {
                console.log("postValue.user_id", val.user_id, postValue.user_id);
                let instaSMOPostObj = {};
                const ig = new IgApiClient();
                ig.state.generateDevice(val.insta_username);
                await ig.account.login(val.insta_username, val.insta_password).then(async (dataA) => {
                    if(postValue.media_file) {      
                        let filePath = env.IMAGEBASEPATH + 'smo/' + postValue.media_file;
                        const imageBuffer = fs.readFileSync(filePath);
                        const dimensions = sizeOf(filePath)
                        let sourceObj = {
                            uploadOptions: {
                                width: dimensions.width,
                                height: dimensions.height,
                                isSidecar: false
                            }
                        }
                        if(postValue.caption){
                            sourceObj.caption = postValue.caption
                        }
                        
                        instaSMOPostObj.mediaSource = postValue.mediaSource;
                    }
                    let publishResult;
                    if(postValue.mediaSource){
                        if(postValue.mediaSource === 'image') {
                            sourceObj.file = imageBuffer;
                            publishResult = await ig.publish.photo(sourceObj);
                            console.log('Post published:', publishResult);
                        } else if(postValue.mediaSource === 'video') {
                            sourceObj.video = imageBuffer;
                            publishResult = await ig.publish.video(sourceObj);
                            console.log('Post published:', publishResult);
                        }
                    } else if(postValue.caption) {;
                        publishResult = await ig.publish.caption(caption);
                        console.log('Post published:', publishResult);
                    }
                    if(publishResult.media && publishResult.media.id){
                        instaSMOPostObj.post_id = publishResult.media.id;
                        instaSMOPostObj.is_posted = 1;
                        try {
                            UserSMOPost.update(instaSMOPostObj, { where: { id: postValue.id }})
                        } catch (error) {
                            cb2;
                        }
                    } else {
                        cb2;
                    }
                }).catch ((error) =>{
                    console.log(error)
                    cb2;
                })
            }, async function (error, result) {
                if (error) {
                    cb;
                } else {
                    cb;
                }
            });
        }, async function (error, result) {
            if (error) {
              res.status(400);
              res.json({ replyCode: 'error', replyMsg: error });
            } else {
                res.status(201);
                res.json({ replyMsg: 'Successfully Posted!', replyCode: 'success' });
            }
        });
    } catch (error) {
        res.status(400);
        res.json({ replyCode: 'error', replyMsg: error.message });
    }
}
